//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "url_mapping")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub hash: String,
    #[sea_orm(unique)]
    pub dest: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub trimmed: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::visit_record::Entity")]
    VisitRecord,
}

impl Related<super::visit_record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VisitRecord.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
